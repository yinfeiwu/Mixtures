## create file

setwd("/home/projects/mixtures")



person="yinfei"

#############  ExAC data  ###########
exac<-read.table("ExAC/all.common_added_cols_v2.txt", sep="\t", header=T, as.is=T, fill=T)


########  sim parameters  ##########
Ntot=10000  ##total number of simulated samples

	##N_pop1=5000
	##N_pop1=1000
	N_pop1=9000

MAF_thresh=0.05

	##pop_names<-c("AFR", "NFE")
	##pop_names<-c("AFR", "AMR")
	##pop_names<-c("AFR", "EAS")
	##pop_names<-c("AFR", "FIN")
	##pop_names<-c("AFR", "SAS")
	##pop_names<-c("AFR", "OTH")
	##pop_names<-c("NFE", "AMR")
	##pop_names<-c("NFE", "EAS")
	pop_names<-c("NFE", "FIN")
	##pop_names<-c("NFE", "OTH")
	##pop_names<-c("NFE", "SAS")
	##pop_names<-c("AMR", "EAS")
	##pop_names<-c("AMR", "FIN")
	##pop_names<-c("AMR", "OTH")
	##pop_names<-c("AMR", "SAS")

k=length(pop_names)

	##pi_start<-rep(1/k, k)  ##c(.5, .5) ##c(.9, .1)
	pi_start<-c(.9,.1)
	##pi_start<-c(.1,.9)

threshold=0.0001


############# simulating NFE and African mixture ##########
x.obs.pop2<- as.data.frame(exac[,paste(c("AC_hom_", "AC_het_", "AC_homref_"), pop_names[2], sep="")])
x.obs.pop1<- as.data.frame(exac[,paste(c("AC_hom_", "AC_het_", "AC_homref_"), pop_names[1], sep="")])
x.sim.pop2<-t(apply(x.obs.pop2, 1, function(x){rmultinom(1, (Ntot-N_pop1), prob=(x))}))
x.sim.pop1<-t(apply(x.obs.pop1, 1, function(x){rmultinom(1, N_pop1, prob=(x))}))

x.touse.a<-x.sim.pop2+x.sim.pop1
x.touse<-as.data.frame(x.touse.a)
x.touse$AF<-(2*x.touse[,1]+x.touse[,2])/(2*Ntot)
x<-x.touse[x.touse$AF>MAF_thresh & x.touse$AF<(1-MAF_thresh),1:3]

###########  EM1 FUNCTION  #############
N=nrow(x) # number of markers

p<-exac[which(x.touse$AF>MAF_thresh & x.touse$AF<(1-MAF_thresh)),paste(c("AC_hom_", "AC_het_", "AC_homref_"), rep(pop_names, each=3), sep="")]


pi_out<-pi_out_median<-pi_new<-pi_start
iter=0
thresh_check=threshold+1

while( thresh_check > threshold){
    pi=pi_new
    gamma_tmp.a<-matrix(NA, nrow=nrow(x), ncol=k)
    for(p_k in 1:k){
        ##estimating the posterior probs from the data per k ancestry group per n markers
        x.p<-cbind(x, p[,c(((p_k-1)*3+1):((p_k-1)*3+3))])
        gamma_tmp.a[,p_k]<-apply(x.p,1, function(x.f){
            p_k_geno<-as.numeric(x.f[4:6])
            pi[p_k]*dmultinom(as.numeric(x.f[1:3]), prob = p_k_geno, log=T)
        })
    }
    
    gamma_tmp<-(apply(gamma_tmp.a,1,function(x){sum(x, na.rm=T)})-gamma_tmp.a)/apply(gamma_tmp.a,1,function(x){sum(x, na.rm=T)})
   
    pi_new<-apply(gamma_tmp,2,function(x){mean(x, na.rm=T)})
    pi_median<-apply(gamma_tmp,2,function(x){median(x, na.rm=T)})
    pi_90<-apply(gamma_tmp,2,function(x){quantile(x, probs=0.90,na.rm=T)})
        
    pi_out<-rbind(pi_out, pi_new)
    pi_out_median<-rbind(pi_out_median, pi_median)
    iter=iter+1
    thresh_check<-sum(abs(pi-pi_new))
    if(round(iter/10)==(iter/10)){write.table(gamma_tmp, paste(person, "/gamma_values/pops", pop_names[1], N_pop1, "_", pop_names[2], (N-N_pop1), 

"_start", paste(pi_start, collapse="_"), "_iter", iter, ".txt",sep=""), row.names=F, col.names=F, quote=F, sep="\t")}
    print(pi)
    print(nrow(x))
}


pi_out2<-cbind(pi_out, pi_out_median, iter, N)

write.table(pi_out2, paste(person, "/pops", pop_names[1], "_", N_pop1, "_", pop_names[2], (Ntot-N_pop1), "_start", paste(pi_start, collapse="_"), 

".txt",sep=""), row.names=F, col.names=F, quote=F, sep="\t")




























##graph
##this code only works for two ancestries - will need to update for additional ancestries ##

person="yinfei" ## make a directory with your name - make sure you use your name when running the code so you are not overwriting others work

setwd(paste("/home/projects/mixtures", person, sep="/"))

int.list<-c(0.1, 0.5, 0.9) ##initial proportion values
sim.list<-c(0.1, 0.5, 0.9)  ## simulated proportion values for one ancestry
N=10000  ## simulated sample size

	##pops<-c('AFR', 'NFE') ##two populations 
	##pops<-c('AFR', 'AMR')
	##pops<-c('AFR', 'EAS')
	##pops<-c('AFR', 'FIN')
	##pops<-c('AFR', 'SAS')
	##pops<-c('AFR', 'OTH')
	##pops<-c('NFE', 'AMR')
	##pops<-c('NFE', 'EAS')
	pops<-c('NFE', 'FIN')
	##pops<-c('NFE', 'OTH')
	##pops<-c('NFE', 'SAS')
	##pops<-c('AMR', 'EAS')
	##pops<-c('AMR', 'FIN')
	##pops<-c('AMR', 'OTH')


##initializing plot##

	##png("AFR_NFE_only_100517_meanANDmedian.png", width=1500, height=500)
	##png("AFR_AMR_only_100517_meanANDmedian.png", width=1500, height=500)
	##png("AFR_EAS_only_100517_meanANDmedian.png", width=1500, height=500)
	##png("AFR_FIN_only_100517_meanANDmedian.png", width=1500, height=500)
	##png("AFR_SAS_only_100517_meanANDmedian.png", width=1500, height=500)
	##png("AFR_OTH_only_100517_meanANDmedian.png", width=1500, height=500)
	##png("NFE_AMR_only_100517_meanANDmedian.png", width=1500, height=500)
	##png("NFE_EAS_only_100517_meanANDmedian.png", width=1500, height=500)
	png("NFE_FIN_only_100517_meanANDmedian.png", width=1500, height=500)
	##png("NFE_OTH_only_100517_meanANDmedian.png", width=1500, height=500)
	##png("NFE_SAS_only_100517_meanANDmedian.png", width=1500, height=500)
	##png("AMR_EAS_only_100517_meanANDmedian.png", width=1500, height=500)
	##png("AMR_FIN_only_100517_meanANDmedian.png", width=1500, height=500)
	##png("AMR_OTH_only_100517_meanANDmedian.png", width=1500, height=500)



par(mai=c(0.5, 0.5, 0.1, 0.1), mfcol=c(3,3))

##looping through plotting parameters##
for(int in int.list){
for(sim in sim.list){

temp<-read.table(paste0("pops", pops[1], "_", sim*N, '_', pops[2], (N-sim*N), "_start", int, "_", (1-int), ".txt"), header=F, as.is=T)

plot(0:(nrow(temp)-1),temp[,1], ylim=c(0,1), pch=20, cex=2, cex.axis=2, cex.lab=2, xlab="", ylab="")
points(0,temp[1,1], cex=2, pch=8)
lines(0:(nrow(temp)-1),temp[,1], lty=1, lwd=2)
abline(h=sim, lty=1, cex=2)

points(0:(nrow(temp)-1),temp[,3], pch=18, cex=2, col="blue")
lines(0:(nrow(temp)-1),temp[,3], lty=3, lwd=2, col="blue")
}##end sim loop
} ##end int loop
dev.off()




Change file =paste
